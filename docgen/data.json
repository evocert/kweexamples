[{"path":"src/api_basic/README.md","readme":"Demonstration of creating a basic API using the KWE server.\n\nSample usage:\n\n```\nhttp://localhost:8081/kweexamples/api_basic/api/?cmd=add&a=4&b=2\nhttp://localhost:8081/kweexamples/api_basic/api/?cmd=sub&a=4&b=2\nhttp://localhost:8081/kweexamples/api_basic/api/?cmd=mul&a=4&b=2\nhttp://localhost:8081/kweexamples/api_basic/api/?cmd=div&a=4&b=2\n```\n\nThe main entry point is `./api/index.js`. Here we have an object `cmd` containing internal command functions. Parameters are parsed, `cmd` is searched\nfor the specified command, and invoked with the rest of the url parameters applied as an object argument first parameter. If the command is not found,\nan attempt is made to load in the command from `./api/cmd`\n"},{"path":"src/api_stateful/README.md","readme":"Demonstration of creating a basic statefule API using the KWE server. Based on <a href=\"https://github.com/evocert/kweexamples/tree/main/src/api_basic\" target=\"_blank\">Basic API</a>\n\nThe relevant file to look at is `./api/cmd/acc.js`, which makes use of `caching` to set up a key in the cache based on the module name and implements a simple accumulator.\n\nLive example <a href=\"http://skullquake.dedicated.co.za/kweexamples/src/api_stateful/api/?cmd=acc\" target=\"_blank\">here</a>\n"},{"path":"src/mqtt/README.md","readme":"KWE `mqtt` getting started template. Copy this into your public web directory and visit the index page.\n\nMake sure you have an `mqtt` server running, `./src/mosquitto.sh` is provided in order to do that. Various other scripts are also provided for testing as well as a front-end page `./src/index.html`.\n\n\nPrerequisites: `curl`, `bash/cmd`, `mosquitto`\n\nInstructions:\n* deploy to `/mqtt`\n* kwe server assumed `localhost:8081`\n* mosquitto server assumed at `locahost:1883`, you can start mosquitto server with `mosquitto.[sh|bat]`\n* run `test[bat|sh]`\n\nAlternatively invoke manual scripts for testing\n\n```\nconnect.[bat|sh]\nsubscribe.[bat|sh]\nmonitor.[bat|sh]\npublish.[bat|sh]\nunmonitor.[bat|sh]\nunsubscribe.[bat|sh]\ndisconnect.[bat|sh]\n```\n\nObserve logs, subscription hanlers in `./hdl/*.js` should invoke logging to server console to indicate their execution.\n"},{"path":"src/os_commands/README.md","readme":"This example demonstrates basic usage of the `command` object, which allows you to execute operating system commands.\n\nThe sample includes reading and writing to/from commands, as well as using simple commands and scripts.\n"},{"path":"src/schedule/README.md","readme":"KWE schedule template. Copy this into your public web directory and edit to files in `./src` to get started. Schedules allows you to set up background jobs and can be used along side with `caching` to facilitate control and feedback.\n"},{"path":"src/scripted_binary_response/README.md","readme":"This example illustrates responding with binary data generated in a server side script. In this example we respond with a `image/bmp` that can be rendered in the browser.\n\nLive example <a href=\"http://skullquake.dedicated.co.za/kweexamples/src/scripted_binary_response/src\" target=\"_blank\">here</a>\n"},{"path":"src/template/README.md","readme":"Basic getting started template. Copy this into your public web directory and edit to files in `./src` to get started.\n"}]